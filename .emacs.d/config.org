#+TITLE: My Emacs Configuration
#+AUTHOR: Norina Madona
#+EMAIL: ludovicopiero@pm.me
#+DATE: [2021-03-01 Tue]
#+OPTIONS: toc:nil num:nil

* General Settings
** Disable some GUI distractions
#+BEGIN_SRC elisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Always accept symbolic links
#+BEGIN_SRC elisp
  (setq vc-follow-symlinks t)
#+END_SRC
** Always show line and column numbers in the mode line
#+BEGIN_SRC elisp
  (setq line-number-mode t)
  (setq column-number-mode t)
#+END_SRC
** Enable some features that are disabled by default
#+BEGIN_SRC elisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC
** Typically, I only want spaces when pressing the TAB key. I Also want 4 of them.
#+BEGIN_SRC elisp
  (setq-default indent-tabs-mode nil
                tab-width 4
                c-basic-offset 4)
#+END_SRC
** Trailing spaces are ugly
#+BEGIN_SRC elisp
  (setq-default show-trailing-whitespace t)
#+END_SRC
** Use one space to end sentences
#+BEGIN_SRC elisp
  (setq sentence-end-double-space nil)
#+END_SRC
** Use UTF-8 as default encoding
#+BEGIN_SRC elisp
  (prefer-coding-system 'utf-8)
#+END_SRC
** Nicer handling of regions
#+BEGIN_SRC elisp
  (transient-mark-mode 1)
#+END_SRC
** Make moving cursor past bottom only scroll a single line rather than half a page
#+BEGIN_SRC elisp
  (setq scroll-step 1
        scroll-conservatively 1)
#+END_SRC
** Enable highlighting of current line
#+BEGIN_SRC elisp
  (global-hl-line-mode 1)
#+END_SRC
** Avoid noisy bell
#+BEGIN_SRC elisp
  (setq visible-bell t)
#+END_SRC
** Improved handling of clipboard in GNU/Linux
#+BEGIN_SRC elisp
  (setq select-enable-clipboard t
        select-enable-primary t
        save-interprogram-paste-before-kill t)
#+END_SRC
** Pasting with middle click should insert at point, not at click
#+BEGIN_SRC elisp
  (setq mouse-yank-at-point t)
#+END_SRC
** Only do candidate cycling if there are very few candidates
#+BEGIN_SRC elisp
  (setq completion-cycle-threshold 3)
#+END_SRC
** Enable a few useful commands that are initially disabled
#+BEGIN_SRC elisp
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
#+END_SRC
** Set font
#+BEGIN_SRC elisp
  (add-to-list 'default-frame-alist
               '(font . "Iosevka Nerd Font 15"))
#+END_SRC
** Auto revert mode
#+BEGIN_SRC elisp
  (global-auto-revert-mode)
#+END_SRC
** Display line numbers mode
#+BEGIN_SRC elisp
  (global-display-line-numbers-mode)
#+END_SRC
** Custom config
#+BEGIN_SRC elisp
    (setq-default tab-width 2)
    (setq-default whitespace-style
                  '(face
                    tabs
                    spaces
                    trailing
                    lines-tail
                    newline
                    missing-newline-at-eof
                    space-before-tab
                    indentation
                    empty
                    space-after-tab
                    space-mark
                    tab-mark
                    newline-mark))

    (fset 'yes-or-no-p 'y-or-n-p)

    ;; Long text goes below
    (global-visual-line-mode t)

    ;; Stop creating backup and autosave files.
    (setq make-backup-files nil
          auto-save-default nil)
    ;; Default is 4k, which is too low for LSP.
    (setq read-process-output-max (* 1024 1024))

    ;; Stop emacs blinking
    (setq visible-bell       nil
            ring-bell-function #'ignore)
#+END_SRC

* General Packages
** Use-package
#+BEGIN_SRC elisp
  (eval-after-load 'gnutls
  '(add-to-list 'gnutls-trustfiles "/etc/ssl/cert.pem"))
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(require 'bind-key)
(setq use-package-always-ensure t)
#+END_SRC
** Themes
#+BEGIN_SRC elisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+END_SRC
** Doom Modeline
#+BEGIN_SRC elisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+END_SRC
** Elcord
#+BEGIN_SRC elisp
  (use-package elcord
    :ensure t
    :config
    (setq elcord-use-major-mode-as-main-icon t)
    (elcord-mode))
#+END_SRC
** Dired
#+BEGIN_SRC elisp
    (use-package dired
      :ensure nil
      :config
      (put 'dired-find-alternate-file 'disabled nil)
       ;; Be smart about choosing file targets.
       (setq dired-dwim-target t)
       (setq delete-by-moving-to-trash t)
       (setq dired-listing-switches "-alvh --group-directories-first"))

    (use-package all-the-icons-dired
      :ensure t
      :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC
** Yasnippet
#+BEGIN_SRC elisp
  (use-package yasnippet
    :init
    (yas-global-mode 1)
    :hook (term-mode . (lambda () (yas-minor-mode -1))))
  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC

** Smartparens
#+BEGIN_SRC elisp
  (use-package smartparens
    :ensure t
    :bind ("C-M-f" . sp-forward-sexp)
          ("C-M-b" . sp-backward-sexp)
    :config
    (require 'smartparens-config)
    (smartparens-global-mode t)
    (show-smartparens-global-mode t))
#+END_SRC
** Vertico
#+BEGIN_SRC elisp
  (use-package vertico
    :init
    (vertico-mode)
    (setq vertico-count 8))
#+END_SRC
** Savehist
#+BEGIN_SRC elisp
  (use-package savehist
    :init
    (savehist-mode))
#+END_SRC
** Which Key
#+BEGIN_SRC elisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
** Company
#+BEGIN_SRC elisp
  (use-package company
    :init
    (setq company-idle-delay 0.0
          company-minimum-prefix-length 1
          lsp-idle-delay 0.1))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; (use-package company-yasnippet       ;;
  ;;   :straight t                        ;;
  ;;   :ensure t                          ;;
  ;;   :bind ("M-/" . company-yasnippet)) ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC
** Magit
#+BEGIN_SRC elisp
    (use-package magit
      :ensure t
      :init (progn (bind-key "C-x g" 'magit-status)))
#+END_SRC
** Flycheck
#+BEGIN_SRC elisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode))
#+END_SRC
** Vterm
#+BEGIN_SRC elisp
  (use-package vterm
    :ensure t
    :bind ("C-c t" . vterm)
    ("C-c T" . vterm-other-window)
    :config
    (setq vterm-shell "fish"))

  ;; Automatically open vterm in bottom window
  (add-to-list 'display-buffer-alist
       '("\*vterm\*"
         (display-buffer-in-side-window)
         (window-height . 0.25)
         (side . bottom)
         (slot . 0)))
#+END_SRC
** Projectile
#+BEGIN_SRC elisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC
** Multiple Cursors
#+BEGIN_SRC elisp
  (use-package multiple-cursors
    :bind (("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this)))
#+END_SRC
** Copilot
#+BEGIN_SRC elisp
  (use-package copilot
  :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
  :ensure t
  :hook (prog-mode . copilot-mode)
  :bind (("C-c M-f" . copilot-complete)
         :map copilot-completion-map
         ("C-g" . 'copilot-clear-overlay)
         ("M-p" . 'copilot-previous-completion)
         ("M-n" . 'copilot-next-completion)
         ("C-<tab>" . 'copilot-accept-completion)
         ("M-f" . 'copilot-accept-completion-by-word)
         ("M-<return>" . 'copilot-accept-completion-by-line)))
#+END_SRC

* Org Mode
** Org
#+BEGIN_SRC elisp
  (use-package org
  :ensure t
  :config
    ;; Some general stuff.
    (setq org-reverse-note-order t
          org-use-fast-todo-selection t
          org-adapt-indentation nil
          org-hide-leading-stars t
          org-hide-emphasis-markers t
          org-ctrl-k-protect-subtree t
          org-pretty-entities t
          org-ellipsis "â€¦")

    ;; Add some todo keywords.
    (setq org-todo-keywords
          '((sequence "TODO(t)"
                      "STARTED(s!)"
                      "WAITING(w@/!)"
                      "DELEGATED(@!)"
                      "|"
                      "DONE(d!)"
                      "CANCELED(c@!)")))
    )

#+END_SRC
** Org Modern
#+BEGIN_SRC elisp
  (use-package org-modern
    :ensure t
    :hook (org-mode . org-modern-mode))
#+END_SRC
** Org Roam
#+BEGIN_SRC elisp
  (use-package org-roam
    :ensure t
    :hook
    (after-init . org-roam-mode)
    :custom
    (org-roam-directory "~/org/roam")
    :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n g" . org-roam-graph)
                 ("C-c n i" . org-roam-insert)
                 ("C-c n I" . org-roam-insert-immediate)
                 ("C-c n t" . org-roam-dailies-today)
                 ("C-c n y" . org-roam-dailies-yesterday)
                 ("C-c n t" . org-roam-dailies-tomorrow)
                 ("C-c n j" . org-roam-dailies-goto-date)
                 ("C-c n c" . org-roam-capture)
                 ("C-c n r" . org-roam-refile)
                 ("C-c n b" . org-roam-switch-to-buffer)
                 ("C-c n a" . org-roam-alias-add)
                 ("C-c n d" . org-roam-diagnostics)
                 ("C-c n x" . org-roam-db-build-cache))))
#+END_SRC

* Programming
** LSP
#+BEGIN_SRC elisp
  (use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (lsp-mode . lsp-enable-which-key-integration)
  :commands lsp lsp-deferred)
#+END_SRC
** LSP Ui
#+BEGIN_SRC elisp
  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode
    :init
    (setq lsp-ui-doc-enable t
          lsp-ui-sideline-enable nil
          lsp-ui-sideline-ignore-duplicate t
          lsp-ui-peek-enable nil
          lsp-ui-doc-position 'at-point))
#+END_SRC

* Python
** Python Mode
#+BEGIN_SRC elisp
  (use-package python-mode
    :ensure t
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("python" . python-mode)
    :config
    (setq python-shell-interpreter "python3"
          python-shell-interpreter-args "-i"))
#+END_SRC
** Python Black
#+BEGIN_SRC elisp
  (use-package python-black
    :ensure t
    :hook (python-mode . python-black-on-save-mode))
#+END_SRC
** Python LSP
#+BEGIN_SRC elisp
  (use-package lsp-python-ms
    :ensure t
    :hook (python-mode . lsp-deferred))
#+END_SRC

* Rust
** Rust Mode
#+BEGIN_SRC elisp
  (use-package rust-mode
    :ensure t
    :mode ("\\.rs\\'" . rust-mode)
    :hook (rust-mode . lsp-deferred)
    :config
    (setq rust-format-on-save t))
#+END_SRC
** Cargo
#+BEGIN_SRC elisp
  (use-package cargo
    :ensure t
    :hook (rust-mode . cargo-minor-mode))
#+END_SRC
** Rustic
#+BEGIN_SRC elisp
  (use-package rustic
    :ensure t
    :mode ("\\.rs\\'" . rustic-mode)
    :config
    (setq rustic-lsp-server 'rust-analyzer))
#+END_SRC

* C++
** C++ Mode
#+BEGIN_SRC elisp
  (use-package cc-mode
    :ensure t
    :mode ("\\.cpp\\'" . c++-mode)
    :hook (c++-mode . lsp-deferred)
    :config
    (setq c-default-style "linux"
          c-basic-offset 4))
#+END_SRC
